# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainFrame.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QWidget, QMenu, QAction,QTableWidgetItem, QTextEdit,QAbstractItemView
from PyQt5.QtGui import QCursor, QIcon,QTextCursor

import shelve
import atexit

from Controller import  Ctrl
from FCB import *
from icos import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowIcon(QIcon(":/icos/system.ico"))
        MainWindow.setWindowTitle("File System")
        MainWindow.resize(1192, 725)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self._parentFcb=None # 当前窗口对应的文件夹的fcb
        self._fcbs=[] # 暂存当前窗口现显示的所有文件fcb
        self._ctrl=Ctrl(self) # 窗口逻辑控制器

        self.pathText = QtWidgets.QLineEdit(self.centralwidget)
        self.pathText.setGeometry(QtCore.QRect(240, 10, 581, 41))
        self.pathText.setObjectName("pathText")
        self.pathText.textChanged.connect(self.setupTableWidget) # 路径变更触发
        self.pathText.setEnabled(False)


        self.formatBtn = QtWidgets.QPushButton(self.centralwidget)
        self.formatBtn.setGeometry(QtCore.QRect(870, 10, 100, 41))
        self.formatBtn.setObjectName("formatBtn")
        self.formatBtn.setText('格式化')
        self.formatBtn.clicked.connect(self.format) # 绑定格式化事件
        self.formatBtn.setStyleSheet("background-color:	#E6E6FA;")


        self.backBtn = QtWidgets.QPushButton(self.centralwidget)
        self.backBtn.setGeometry(QtCore.QRect(155, 10, 51, 41))
        self.backBtn.setObjectName("backBtn")
        self.backBtn.clicked.connect(self.backTrack) # 绑定回退事件
        self.backBtn.setIcon(QIcon(":/icos/back.ico"))
        self.backBtn.setStyleSheet("background-color:transparent;border:none;")

        self.mkdirBtn = QtWidgets.QPushButton(self.centralwidget)
        self.mkdirBtn.setGeometry(QtCore.QRect(100, 10, 51, 41))
        self.mkdirBtn.setObjectName("mkdirBtn")
        self.mkdirBtn.clicked.connect(self.newDir) # 绑定新建文件夹事件
        self.mkdirBtn.setIcon(QIcon(":/icos/dir.ico"))
        self.mkdirBtn.setStyleSheet("background-color:transparent;border:none;")



        self.fileTree = QtWidgets.QTreeWidget(self.centralwidget)
        self.fileTree.setGeometry(QtCore.QRect(0, 100, 241, 601))
        self.fileTree.setObjectName("fileTree")
        self.fileTree.setHeaderHidden(True)
        self.root=QtWidgets.QTreeWidgetItem(self.fileTree)
        self.root.setIcon(0,QIcon(":/icos/dir.ico"))
        self.root.setText(0,'Root') # 根目录
        self.fileTree.clicked.connect(self.expendDir) # 绑定展开收起事件
        self._treeItem=self.root # 当前目录对应的树节点
        self.setupFileTree(self._parentFcb,self._treeItem)


        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(280, 100, 911, 591))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setColumnWidth(0,300)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setColumnWidth(1,250)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.tableWidget.doubleClicked.connect(self.clickFile) # 双击行事件
        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows) # 选中全行
        self.tableWidget.setShowGrid(False) # 不显示分割线
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu) # 右键行事件
        self.tableWidget.customContextMenuRequested.connect(self.rightMenu)
        self.emptyLabel=QtWidgets.QLabel(self.tableWidget)
        self.emptyLabel.setGeometry(QtCore.QRect(380, 1, 911, 591))
        self.emptyLabel.setText('此文件夹为空。')
        self.emptyLabel.setVisible(False)
        self.setupTableWidget() #显示文件区

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        self.pathText.setText('Root>')

        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "名称"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "修改日期"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "类型"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "大小"))

    # 格式化
    def format(self):
        print('格式化磁盘')
        self._ctrl.format() # 格式化磁盘
        self.setupTableWidget() #重置页面的tableWwidget
        self.fileTree.clear() # 重置页面的treeWidget
        self.root = QtWidgets.QTreeWidgetItem(self.fileTree)
        self.root.setIcon(0,QIcon(":/icos/dir.ico"))
        self.root.setText(0, 'Root')  # 根目录
        self._treeItem = self.root
        self.pathText.setText('Root>') # 重置pathText

    def setupFileTree(self,fcb:FCB,parent):
        if fcb._type==TXTFILE:
            return
        if fcb._addr==[]:
            return
        for f in fcb._addr:
            if f._type==DIR:
                child= QtWidgets.QTreeWidgetItem(parent)
                child.setIcon(0,QIcon(":/icos/dir.ico"))
                child.setText(0, f._filename)  # 根目录
                self.setupFileTree(f,child)
        return



    def expendDir(self):
        print('点击展开文件夹')
        self.fileTree.collapseItem(self.fileTree.currentItem())

    # 重置tableWidget
    def setupTableWidget(self):
        self.tableWidget.setRowCount(0)
        if len(self._fcbs)==0:
            self.emptyLabel.setVisible(True)
            return

        self.tableWidget.setRowCount(len(self._fcbs))
        for index, f in enumerate(self._fcbs):
            item1 = QTableWidgetItem(f._filename+('.txt' if f._type==TXTFILE else ''))
            item1.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            if f._type==TXTFILE:
                item1.setIcon(QIcon(':/icos/file.ico'))
            else:
                item1.setIcon(QIcon(':/icos/dir.ico'))

            item2 = QTableWidgetItem(f._time)
            item2.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)

            size='' if f._type==DIR else str(f._size)+'KB'
            item4 = QTableWidgetItem(size)
            item4.setTextAlignment(Qt.AlignVCenter | Qt.AlignRight)
            item4.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)

            item3 = QTableWidgetItem('文件夹' if f._type == DIR else '文本文档')
            item3.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)

            self.tableWidget.setItem(index, 0, item1)
            self.tableWidget.setItem(index, 1, item2)
            self.tableWidget.setItem(index, 2, item3)
            self.tableWidget.setItem(index, 3, item4)

    def rightMenu(self):
        if self.tableWidget.selectedItems()==[]:
            print('右键工作区！双菜单！')
            self.spaceRightMenu()
        else:
            print('右键文件（夹）！三菜单！')
            self.rowRightMenu()

    def rowRightMenu(self):
        self.rightMenu = QMenu(self.tableWidget)

        self.actionA = QAction(u'打开', self.tableWidget)
        self.actionA.setShortcut('Ctrl+O')
        self.rightMenu.addAction(self.actionA)

        self.actionB = QAction(u'删除', self.tableWidget)
        self.actionB.setShortcut('Ctrl+D')
        self.rightMenu.addAction(self.actionB)

        self.actionC = QAction(u'重命名', self.tableWidget)
        self.actionC.setShortcut('Ctrl+R')
        self.rightMenu.addAction(self.actionC)

        self.actionA.triggered.connect(self.clickFile)
        self.actionB.triggered.connect(self.delFile)
        self.actionC.triggered.connect(self.rename)

        self.rightMenu.popup(QCursor.pos())  # 声明当鼠标在groupBox控件上右击时，在鼠标位置显示右键菜单

    def spaceRightMenu(self):
        self.rightMenu = QMenu(self.tableWidget)

        self.actionA = QAction(u'新建文件夹', self.tableWidget)  # 创建菜单选项对象
        self.actionA.setShortcut('Ctrl+F')  # 设置动作A的快捷键
        self.rightMenu.addAction(self.actionA)  # 把动作A选项对象添加到菜单self.groupBox_menu上

        self.actionB = QAction(u'新建文本文件', self.tableWidget)
        self.actionB.setShortcut('Ctrl+T')  # 设置动作A的快捷键
        self.rightMenu.addAction(self.actionB)

        self.actionA.triggered.connect(self.newDir)  # 将动作A触发时连接到槽函数 button
        self.actionB.triggered.connect(self.newFile)

        self.rightMenu.popup(QCursor.pos())  # 声明当鼠标在groupBox控件上右击时，在鼠标位置显示右键菜单

    def newDir(self):
        print('新建文件夹')
        self.emptyLabel.setVisible(False)
        dirName=self._ctrl.createDir()
        child=QtWidgets.QTreeWidgetItem(self._treeItem)
        child.setIcon(0,QIcon(":/icos/dir.ico"))
        child.setText(0,dirName)

    def newFile(self):
        print('新建文件！')
        self.emptyLabel.setVisible(False)
        self._ctrl.createFile()

    def modifyFile(self,fileFcb,content):
        print('修改文件！')
        self._ctrl.modify(fileFcb,content)

    def readFile(self,fcb):
        print('读取文件！')
        content= self._ctrl.readFile(fcb)
        return content

    def delFile(self):
        print('删除文件（夹）！')
        index=self.tableWidget.selectedItems()[0].row()
        fcb=self._fcbs[index]
        minus,i=0,0
        while i<index:
            if self._fcbs[i]._type==TXTFILE:
                minus+=1
            i+=1
        index-=minus
        print('树形结构中的文件夹index：',index)
        if fcb._type==DIR:
            self._treeItem.removeChild(self._treeItem.child(index))
        self._ctrl.delFile(fcb)
        self._fcbs.pop(index)
        self.tableWidget.removeRow(index)

    def rename(self):
        print('重命名文件（夹）')
        text, ok = QtWidgets.QInputDialog.getText(self.tableWidget, '重命名', '输入文件名：')
        if ok:
            index=self.tableWidget.selectedItems()[0].row()
            fcb = self._fcbs[index]
            fcb._filename=self._ctrl.validateFileName(str(text),fcb._type,fcb._id)
            # 修改树形结构名称
            minus, i = 0, 0
            while i < index:
                if self._fcbs[i]._type == TXTFILE:
                    minus += 1
                i += 1
            index -= minus
            print('树形结构中的文件夹index：', index)
            if fcb._type==DIR:
                self._treeItem.child(index).setText(0,str(text))
                print('新的文件名为：', fcb._filename)
                self.tableWidget.selectedItems()[0].setText(fcb._filename)
            else:
                print('新的文件名为：',fcb._filename)
                self.tableWidget.selectedItems()[0].setText(fcb._filename+'.txt')

    def backTrack(self):
        print('回退一级')
        if self._parentFcb._filename=='Root':
            print('已到达根目录，回退无效！')
            return
        self._parentFcb=self._parentFcb._parent
        self._fcbs=self._parentFcb._addr
        oldPath=self.pathText.displayText()
        newPath=oldPath.split('>')
        newPath='>'.join(newPath[:-2])+'>'
        self.pathText.setText(newPath)
        self._treeItem=self._treeItem.parent()

    def clickFile(self):
        print('双击文件（夹）！')
        type=self.tableWidget.selectedItems()[2].text()
        print('type:',type)
        rowNum = self.tableWidget.selectedItems()[0].row()
        # 双击文件夹进入
        if type=='文件夹':
            fcb=self._fcbs[rowNum]

            minus, i = 0, 0
            while i < rowNum:
                if self._fcbs[i]._type == TXTFILE:
                    minus += 1
                i += 1
            rowNum -= minus
            print('树形结构中的文件夹index：', rowNum)

            self._parentFcb = fcb
            self._fcbs=fcb._addr

            self._treeItem=self._treeItem.child(rowNum)
            newPath=self.pathText.displayText()+fcb._filename+'>'
            self.pathText.setText(newPath)
        # 双击文件编辑
        else:
            name=self.tableWidget.selectedItems()[0].text()
            size=self.tableWidget.selectedItems()[3].text()
            print(name,size)
            self.text=QtWidgets.QDialog()
            self.text.setWindowTitle(name)
            self.text.setWindowIcon(QIcon(':/icos/notepad.ico'))
            self.t=QtWidgets.QTextEdit(self.text)
            self.t.resize(400,400)

            if size[0]!='0':
                content=self.readFile(self._fcbs[rowNum]).decode('utf8','ignore')
                self.t.setText(content)
            cursor = self.t.textCursor()
            cursor.movePosition(QTextCursor.End)
            self.t.setTextCursor(cursor)

            self.text.closeEvent=self.close
            self.text.exec()

    def store(self):
        s = shelve.open('test_shelf.db')
        try:
            s['fcbNums']=self._ctrl._disk._fcbNums
            s['remainer']=self._ctrl._disk._remainer
            s['bitmap']=self._ctrl._disk._bitmap
            s['memory']=self._ctrl._disk._memory
            s['fcb']=self._ctrl._disk._root

        finally:
            s.close()


    def close(self,event):
        print('关闭文本框！')
        result = QtWidgets.QMessageBox.question(self.text, '记事本', "你想将更改保存到\n"+self.text.windowTitle()+"吗?",
                                                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No|QtWidgets.QMessageBox.Cancel)
        if result == QtWidgets.QMessageBox.Yes:
            # 更新文件fcb
            content=self.t.toPlainText()
            fcb = self._fcbs[self.tableWidget.selectedItems()[0].row()]
            self.modifyFile(fcb,content)

            # 更新当前界面的fcb显示
            size=str(fcb._size)+'KB'
            print(size)
            self.tableWidget.selectedItems()[3].setText(size)

            event.accept()

        elif result==QtWidgets.QMessageBox.Cancel:
            event.ignore()


@atexit.register
def store():
    ui.store()
    print('存储信息结束，准备退出！')


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    global ui
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowTitle('File System')
    MainWindow.show()
    sys.exit(app.exec_())
